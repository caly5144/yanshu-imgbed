# This is a basic workflow to help you get started with Actions
name: Release and Build
# Controls when the workflow will run
on:
  release:
    types: [created]
permissions:
  contents: write # 确保有写入权限，以便上传Release Assets
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      # Sets up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5' 
      
      # Build for Windows
      - name: Build for Windows (amd64) with CGO
        run: |
          # 安装 MinGW-w64 交叉编译器
          sudo apt-get update
          sudo apt-get install -y mingw-w64
          
          # 设置 C 编译器环境变量，Go会使用它来链接CGO代码
          export CC=x86_64-w64-mingw32-gcc
          
          # 启用 CGO 编译 Windows 可执行文件
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o yanshu-imgbed.exe .
      
      # Build for Linux
      - name: Build for Linux (amd64) with CGO
        run: |
          # 在 Linux 平台编译 Linux 可执行文件时，CGO 通常默认是启用的，但明确设置更安全
          # 且不需要额外安装C编译器，因为ubuntu-latest自带gcc
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o yanshu-imgbed .

      # --- 上传Release Assets的步骤 ---

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用内置的token进行认证
        with:
          upload_url: ${{ github.event.release.upload_url }} # Release创建后，会提供一个上传URL
          asset_path: ./yanshu-imgbed.exe # 直接上传Windows可执行文件
          asset_name: yanshu-imgbed-windows-amd64.exe # 在Release页面显示的文件名
          asset_content_type: application/octet-stream # 通用二进制文件类型

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./yanshu-imgbed # 直接上传Linux可执行文件
          asset_name: yanshu-imgbed-linux-amd64 # 在Release页面显示的文件名
          asset_content_type: application/octet-stream # 通用二进制文件类型